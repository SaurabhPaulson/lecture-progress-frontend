{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api/progress';\nexport const fetchProgress = async (userId, videoId) => {\n  try {\n    const response = await fetch(`${API_URL}/${userId}/${videoId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch progress');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching progress:', error);\n    throw error;\n  }\n};\nexport const saveProgress = async (userId, videoId, intervals) => {\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        videoId,\n        intervals\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to save progress');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error saving progress:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","fetchProgress","userId","videoId","response","fetch","ok","Error","json","error","console","saveProgress","intervals","method","headers","body","JSON","stringify"],"sources":["C:/Gizmeon/Perpetual/Project/Test-2/lecture-progress-frontend/src/api/progressApi.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api/progress';\n\nexport const fetchProgress = async (userId, videoId) => {\n  try {\n    const response = await fetch(`${API_URL}/${userId}/${videoId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch progress');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching progress:', error);\n    throw error;\n  }\n};\n\nexport const saveProgress = async (userId, videoId, intervals) => {\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ userId, videoId, intervals }),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to save progress');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error saving progress:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,oCAAoC;AAErF,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,MAAM,EAAEC,OAAO,KAAK;EACtD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,IAAIK,MAAM,IAAIC,OAAO,EAAE,CAAC;IAC/D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAOT,MAAM,EAAEC,OAAO,EAAES,SAAS,KAAK;EAChE,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACR,OAAO,EAAE;MACpCgB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEf,MAAM;QAAEC,OAAO;QAAES;MAAU,CAAC;IACrD,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}