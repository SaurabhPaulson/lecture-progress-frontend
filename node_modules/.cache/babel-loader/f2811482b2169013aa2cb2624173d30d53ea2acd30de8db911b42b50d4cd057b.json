{"ast":null,"code":"var _jsxFileName = \"C:\\\\Gizmeon\\\\Perpetual\\\\Project\\\\Test-2\\\\lecture-progress-frontend\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport VideoPlayer from '../components/VideoPlayer';\nimport { fetchProgress } from '../api/progressApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USER_ID = 'user1'; // Should match VideoPlayer\n\nconst Home = () => {\n  _s();\n  const [videos, setVideos] = useState([\n    // Example video objects\n    // { id: 'video1', name: 'Lecture 1', url: '...' }\n  ]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [intervals, setIntervals] = useState([]);\n  const [videoDuration, setVideoDuration] = useState(0);\n  const [videoProgress, setVideoProgress] = useState({}); // { videoId: { percent, lastWatched } }\n\n  // Fetch progress for all videos on mount or when videos change\n  useEffect(() => {\n    const fetchAllProgress = async () => {\n      const progressMap = {};\n      for (const video of videos) {\n        try {\n          const data = await fetchProgress(USER_ID, video.id);\n          const intervals = data.intervals || [];\n          if (intervals.length) {\n            // Merge intervals and get last watched\n            intervals.sort((a, b) => a.start - b.start);\n            let merged = [intervals[0]];\n            for (let i = 1; i < intervals.length; i++) {\n              const last = merged[merged.length - 1];\n              const curr = intervals[i];\n              if (curr.start <= last.end) {\n                last.end = Math.max(last.end, curr.end);\n              } else {\n                merged.push(curr);\n              }\n            }\n            const uniqueTime = merged.reduce((sum, i) => sum + (i.end - i.start), 0);\n            // You may want to fetch duration from your backend or store it elsewhere\n            // For now, percent will be 0 until duration is available\n            progressMap[video.id] = {\n              percent: 0,\n              lastWatched: merged[merged.length - 1].end,\n              mergedIntervals: merged,\n              uniqueTime\n            };\n          }\n        } catch {\n          // No progress\n        }\n      }\n      setVideoProgress(progressMap);\n    };\n    fetchAllProgress();\n  }, [videos]);\n\n  // Handle progress update from VideoPlayer\n  const handleProgressUpdate = (newIntervals, duration) => {\n    setIntervals(newIntervals);\n    setVideoDuration(duration);\n    // Refresh progress for the selected video\n    setVideoProgress(prev => {\n      if (!duration) return prev;\n      // Merge intervals\n      let merged = [];\n      if (newIntervals.length) {\n        newIntervals.sort((a, b) => a.start - b.start);\n        merged = [newIntervals[0]];\n        for (let i = 1; i < newIntervals.length; i++) {\n          const last = merged[merged.length - 1];\n          const curr = newIntervals[i];\n          if (curr.start <= last.end) {\n            last.end = Math.max(last.end, curr.end);\n          } else {\n            merged.push(curr);\n          }\n        }\n      }\n      const uniqueTime = merged.reduce((sum, i) => sum + (i.end - i.start), 0);\n      const lastWatched = merged.length ? merged[merged.length - 1].end : 0;\n      return {\n        ...prev,\n        [selectedVideo.id]: {\n          percent: duration ? uniqueTime / duration * 100 : 0,\n          lastWatched\n        }\n      };\n    });\n  };\n  const handleSelectVideo = video => {\n    setSelectedVideo(video);\n    // Optionally fetch intervals and duration for this video\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center',\n        margin: 24\n      },\n      children: \"Lecture Progress Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        marginBottom: 24\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 12\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Uploaded Videos:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            listStyle: 'none',\n            padding: 0\n          },\n          children: videos.map(video => {\n            const progress = videoProgress[video.id];\n            let percent = 0;\n            if (progress && videoDuration && selectedVideo && selectedVideo.id === video.id) {\n              percent = (progress.uniqueTime || 0) / videoDuration * 100;\n            } else if (progress && progress.percent) {\n              percent = progress.percent;\n            }\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              style: {\n                margin: '8px 0'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  background: selectedVideo && selectedVideo.id === video.id ? '#76c7c0' : '#eee',\n                  color: selectedVideo && selectedVideo.id === video.id ? '#fff' : '#333',\n                  border: 'none',\n                  borderRadius: 6,\n                  padding: '6px 16px',\n                  cursor: 'pointer',\n                  marginRight: 8\n                },\n                onClick: () => handleSelectVideo(video),\n                children: video.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 19\n              }, this), percent > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  marginLeft: 8,\n                  color: '#4fa3a0',\n                  fontWeight: 500\n                },\n                children: [percent.toFixed(1), \"% watched\", percent < 100 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    marginLeft: 8,\n                    color: '#888'\n                  },\n                  children: \"\\u2022 Continue Watching\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 21\n              }, this)]\n            }, video.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), selectedVideo && /*#__PURE__*/_jsxDEV(VideoPlayer, {\n        video: selectedVideo,\n        userId: USER_ID,\n        onProgressUpdate: handleProgressUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"PUKyJkp76i4e4AtKY+M7FJs4bZ0=\");\n_c = Home;\nexport default Home;\n// ...existing code...\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","VideoPlayer","fetchProgress","jsxDEV","_jsxDEV","USER_ID","Home","_s","videos","setVideos","selectedVideo","setSelectedVideo","intervals","setIntervals","videoDuration","setVideoDuration","videoProgress","setVideoProgress","fetchAllProgress","progressMap","video","data","id","length","sort","a","b","start","merged","i","last","curr","end","Math","max","push","uniqueTime","reduce","sum","percent","lastWatched","mergedIntervals","handleProgressUpdate","newIntervals","duration","prev","handleSelectVideo","children","style","textAlign","margin","fileName","_jsxFileName","lineNumber","columnNumber","className","marginBottom","listStyle","padding","map","progress","background","color","border","borderRadius","cursor","marginRight","onClick","name","marginLeft","fontWeight","toFixed","userId","onProgressUpdate","_c","$RefreshReg$"],"sources":["C:/Gizmeon/Perpetual/Project/Test-2/lecture-progress-frontend/src/pages/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport VideoPlayer from '../components/VideoPlayer';\nimport { fetchProgress } from '../api/progressApi';\n\nconst USER_ID = 'user1'; // Should match VideoPlayer\n\nconst Home = () => {\n  const [videos, setVideos] = useState([\n    // Example video objects\n    // { id: 'video1', name: 'Lecture 1', url: '...' }\n  ]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [intervals, setIntervals] = useState([]);\n  const [videoDuration, setVideoDuration] = useState(0);\n  const [videoProgress, setVideoProgress] = useState({}); // { videoId: { percent, lastWatched } }\n\n  // Fetch progress for all videos on mount or when videos change\n  useEffect(() => {\n    const fetchAllProgress = async () => {\n      const progressMap = {};\n      for (const video of videos) {\n        try {\n          const data = await fetchProgress(USER_ID, video.id);\n          const intervals = data.intervals || [];\n          if (intervals.length) {\n            // Merge intervals and get last watched\n            intervals.sort((a, b) => a.start - b.start);\n            let merged = [intervals[0]];\n            for (let i = 1; i < intervals.length; i++) {\n              const last = merged[merged.length - 1];\n              const curr = intervals[i];\n              if (curr.start <= last.end) {\n                last.end = Math.max(last.end, curr.end);\n              } else {\n                merged.push(curr);\n              }\n            }\n            const uniqueTime = merged.reduce((sum, i) => sum + (i.end - i.start), 0);\n            // You may want to fetch duration from your backend or store it elsewhere\n            // For now, percent will be 0 until duration is available\n            progressMap[video.id] = {\n              percent: 0,\n              lastWatched: merged[merged.length - 1].end,\n              mergedIntervals: merged,\n              uniqueTime\n            };\n          }\n        } catch {\n          // No progress\n        }\n      }\n      setVideoProgress(progressMap);\n    };\n    fetchAllProgress();\n  }, [videos]);\n\n  // Handle progress update from VideoPlayer\n  const handleProgressUpdate = (newIntervals, duration) => {\n    setIntervals(newIntervals);\n    setVideoDuration(duration);\n    // Refresh progress for the selected video\n    setVideoProgress((prev) => {\n      if (!duration) return prev;\n      // Merge intervals\n      let merged = [];\n      if (newIntervals.length) {\n        newIntervals.sort((a, b) => a.start - b.start);\n        merged = [newIntervals[0]];\n        for (let i = 1; i < newIntervals.length; i++) {\n          const last = merged[merged.length - 1];\n          const curr = newIntervals[i];\n          if (curr.start <= last.end) {\n            last.end = Math.max(last.end, curr.end);\n          } else {\n            merged.push(curr);\n          }\n        }\n      }\n      const uniqueTime = merged.reduce((sum, i) => sum + (i.end - i.start), 0);\n      const lastWatched = merged.length ? merged[merged.length - 1].end : 0;\n      return {\n        ...prev,\n        [selectedVideo.id]: {\n          percent: duration ? (uniqueTime / duration) * 100 : 0,\n          lastWatched,\n        }\n      };\n    });\n  };\n\n  const handleSelectVideo = (video) => {\n    setSelectedVideo(video);\n    // Optionally fetch intervals and duration for this video\n  };\n\n  return (\n    <div>\n      <h1 style={{ textAlign: 'center', margin: 24 }}>Lecture Progress Tracker</h1>\n      <div className=\"container\" style={{ marginBottom: 24 }}>\n        <div style={{ marginBottom: 12 }}>\n          <b>Uploaded Videos:</b>\n          <ul style={{ listStyle: 'none', padding: 0 }}>\n            {videos.map((video) => {\n              const progress = videoProgress[video.id];\n              let percent = 0;\n              if (progress && videoDuration && selectedVideo && selectedVideo.id === video.id) {\n                percent = (progress.uniqueTime || 0) / videoDuration * 100;\n              } else if (progress && progress.percent) {\n                percent = progress.percent;\n              }\n              return (\n                <li key={video.id} style={{ margin: '8px 0' }}>\n                  <button\n                    style={{\n                      background: selectedVideo && selectedVideo.id === video.id ? '#76c7c0' : '#eee',\n                      color: selectedVideo && selectedVideo.id === video.id ? '#fff' : '#333',\n                      border: 'none',\n                      borderRadius: 6,\n                      padding: '6px 16px',\n                      cursor: 'pointer',\n                      marginRight: 8\n                    }}\n                    onClick={() => handleSelectVideo(video)}\n                  >\n                    {video.name}\n                  </button>\n                  {percent > 0 && (\n                    <span style={{ marginLeft: 8, color: '#4fa3a0', fontWeight: 500 }}>\n                      {percent.toFixed(1)}% watched\n                      {percent < 100 && (\n                        <span style={{ marginLeft: 8, color: '#888' }}>• Continue Watching</span>\n                      )}\n                    </span>\n                  )}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n        {selectedVideo && (\n          <VideoPlayer\n            video={selectedVideo}\n            userId={USER_ID}\n            onProgressUpdate={handleProgressUpdate}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n// ...existing code..."],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,SAASC,aAAa,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAG,OAAO,CAAC,CAAC;;AAEzB,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC;IACnC;IACA;EAAA,CACD,CAAC;EACF,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACe,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAExD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMkB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,MAAMC,WAAW,GAAG,CAAC,CAAC;MACtB,KAAK,MAAMC,KAAK,IAAIZ,MAAM,EAAE;QAC1B,IAAI;UACF,MAAMa,IAAI,GAAG,MAAMnB,aAAa,CAACG,OAAO,EAAEe,KAAK,CAACE,EAAE,CAAC;UACnD,MAAMV,SAAS,GAAGS,IAAI,CAACT,SAAS,IAAI,EAAE;UACtC,IAAIA,SAAS,CAACW,MAAM,EAAE;YACpB;YACAX,SAAS,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,KAAK,GAAGD,CAAC,CAACC,KAAK,CAAC;YAC3C,IAAIC,MAAM,GAAG,CAAChB,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,SAAS,CAACW,MAAM,EAAEM,CAAC,EAAE,EAAE;cACzC,MAAMC,IAAI,GAAGF,MAAM,CAACA,MAAM,CAACL,MAAM,GAAG,CAAC,CAAC;cACtC,MAAMQ,IAAI,GAAGnB,SAAS,CAACiB,CAAC,CAAC;cACzB,IAAIE,IAAI,CAACJ,KAAK,IAAIG,IAAI,CAACE,GAAG,EAAE;gBAC1BF,IAAI,CAACE,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACJ,IAAI,CAACE,GAAG,EAAED,IAAI,CAACC,GAAG,CAAC;cACzC,CAAC,MAAM;gBACLJ,MAAM,CAACO,IAAI,CAACJ,IAAI,CAAC;cACnB;YACF;YACA,MAAMK,UAAU,GAAGR,MAAM,CAACS,MAAM,CAAC,CAACC,GAAG,EAAET,CAAC,KAAKS,GAAG,IAAIT,CAAC,CAACG,GAAG,GAAGH,CAAC,CAACF,KAAK,CAAC,EAAE,CAAC,CAAC;YACxE;YACA;YACAR,WAAW,CAACC,KAAK,CAACE,EAAE,CAAC,GAAG;cACtBiB,OAAO,EAAE,CAAC;cACVC,WAAW,EAAEZ,MAAM,CAACA,MAAM,CAACL,MAAM,GAAG,CAAC,CAAC,CAACS,GAAG;cAC1CS,eAAe,EAAEb,MAAM;cACvBQ;YACF,CAAC;UACH;QACF,CAAC,CAAC,MAAM;UACN;QAAA;MAEJ;MACAnB,gBAAgB,CAACE,WAAW,CAAC;IAC/B,CAAC;IACDD,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACV,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMkC,oBAAoB,GAAGA,CAACC,YAAY,EAAEC,QAAQ,KAAK;IACvD/B,YAAY,CAAC8B,YAAY,CAAC;IAC1B5B,gBAAgB,CAAC6B,QAAQ,CAAC;IAC1B;IACA3B,gBAAgB,CAAE4B,IAAI,IAAK;MACzB,IAAI,CAACD,QAAQ,EAAE,OAAOC,IAAI;MAC1B;MACA,IAAIjB,MAAM,GAAG,EAAE;MACf,IAAIe,YAAY,CAACpB,MAAM,EAAE;QACvBoB,YAAY,CAACnB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,KAAK,GAAGD,CAAC,CAACC,KAAK,CAAC;QAC9CC,MAAM,GAAG,CAACe,YAAY,CAAC,CAAC,CAAC,CAAC;QAC1B,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,YAAY,CAACpB,MAAM,EAAEM,CAAC,EAAE,EAAE;UAC5C,MAAMC,IAAI,GAAGF,MAAM,CAACA,MAAM,CAACL,MAAM,GAAG,CAAC,CAAC;UACtC,MAAMQ,IAAI,GAAGY,YAAY,CAACd,CAAC,CAAC;UAC5B,IAAIE,IAAI,CAACJ,KAAK,IAAIG,IAAI,CAACE,GAAG,EAAE;YAC1BF,IAAI,CAACE,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACJ,IAAI,CAACE,GAAG,EAAED,IAAI,CAACC,GAAG,CAAC;UACzC,CAAC,MAAM;YACLJ,MAAM,CAACO,IAAI,CAACJ,IAAI,CAAC;UACnB;QACF;MACF;MACA,MAAMK,UAAU,GAAGR,MAAM,CAACS,MAAM,CAAC,CAACC,GAAG,EAAET,CAAC,KAAKS,GAAG,IAAIT,CAAC,CAACG,GAAG,GAAGH,CAAC,CAACF,KAAK,CAAC,EAAE,CAAC,CAAC;MACxE,MAAMa,WAAW,GAAGZ,MAAM,CAACL,MAAM,GAAGK,MAAM,CAACA,MAAM,CAACL,MAAM,GAAG,CAAC,CAAC,CAACS,GAAG,GAAG,CAAC;MACrE,OAAO;QACL,GAAGa,IAAI;QACP,CAACnC,aAAa,CAACY,EAAE,GAAG;UAClBiB,OAAO,EAAEK,QAAQ,GAAIR,UAAU,GAAGQ,QAAQ,GAAI,GAAG,GAAG,CAAC;UACrDJ;QACF;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,MAAMM,iBAAiB,GAAI1B,KAAK,IAAK;IACnCT,gBAAgB,CAACS,KAAK,CAAC;IACvB;EACF,CAAC;EAED,oBACEhB,OAAA;IAAA2C,QAAA,gBACE3C,OAAA;MAAI4C,KAAK,EAAE;QAAEC,SAAS,EAAE,QAAQ;QAAEC,MAAM,EAAE;MAAG,CAAE;MAAAH,QAAA,EAAC;IAAwB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7ElD,OAAA;MAAKmD,SAAS,EAAC,WAAW;MAACP,KAAK,EAAE;QAAEQ,YAAY,EAAE;MAAG,CAAE;MAAAT,QAAA,gBACrD3C,OAAA;QAAK4C,KAAK,EAAE;UAAEQ,YAAY,EAAE;QAAG,CAAE;QAAAT,QAAA,gBAC/B3C,OAAA;UAAA2C,QAAA,EAAG;QAAgB;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACvBlD,OAAA;UAAI4C,KAAK,EAAE;YAAES,SAAS,EAAE,MAAM;YAAEC,OAAO,EAAE;UAAE,CAAE;UAAAX,QAAA,EAC1CvC,MAAM,CAACmD,GAAG,CAAEvC,KAAK,IAAK;YACrB,MAAMwC,QAAQ,GAAG5C,aAAa,CAACI,KAAK,CAACE,EAAE,CAAC;YACxC,IAAIiB,OAAO,GAAG,CAAC;YACf,IAAIqB,QAAQ,IAAI9C,aAAa,IAAIJ,aAAa,IAAIA,aAAa,CAACY,EAAE,KAAKF,KAAK,CAACE,EAAE,EAAE;cAC/EiB,OAAO,GAAG,CAACqB,QAAQ,CAACxB,UAAU,IAAI,CAAC,IAAItB,aAAa,GAAG,GAAG;YAC5D,CAAC,MAAM,IAAI8C,QAAQ,IAAIA,QAAQ,CAACrB,OAAO,EAAE;cACvCA,OAAO,GAAGqB,QAAQ,CAACrB,OAAO;YAC5B;YACA,oBACEnC,OAAA;cAAmB4C,KAAK,EAAE;gBAAEE,MAAM,EAAE;cAAQ,CAAE;cAAAH,QAAA,gBAC5C3C,OAAA;gBACE4C,KAAK,EAAE;kBACLa,UAAU,EAAEnD,aAAa,IAAIA,aAAa,CAACY,EAAE,KAAKF,KAAK,CAACE,EAAE,GAAG,SAAS,GAAG,MAAM;kBAC/EwC,KAAK,EAAEpD,aAAa,IAAIA,aAAa,CAACY,EAAE,KAAKF,KAAK,CAACE,EAAE,GAAG,MAAM,GAAG,MAAM;kBACvEyC,MAAM,EAAE,MAAM;kBACdC,YAAY,EAAE,CAAC;kBACfN,OAAO,EAAE,UAAU;kBACnBO,MAAM,EAAE,SAAS;kBACjBC,WAAW,EAAE;gBACf,CAAE;gBACFC,OAAO,EAAEA,CAAA,KAAMrB,iBAAiB,CAAC1B,KAAK,CAAE;gBAAA2B,QAAA,EAEvC3B,KAAK,CAACgD;cAAI;gBAAAjB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,EACRf,OAAO,GAAG,CAAC,iBACVnC,OAAA;gBAAM4C,KAAK,EAAE;kBAAEqB,UAAU,EAAE,CAAC;kBAAEP,KAAK,EAAE,SAAS;kBAAEQ,UAAU,EAAE;gBAAI,CAAE;gBAAAvB,QAAA,GAC/DR,OAAO,CAACgC,OAAO,CAAC,CAAC,CAAC,EAAC,WACpB,EAAChC,OAAO,GAAG,GAAG,iBACZnC,OAAA;kBAAM4C,KAAK,EAAE;oBAAEqB,UAAU,EAAE,CAAC;oBAAEP,KAAK,EAAE;kBAAO,CAAE;kBAAAf,QAAA,EAAC;gBAAmB;kBAAAI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CACzE;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACG,CACP;YAAA,GAtBMlC,KAAK,CAACE,EAAE;cAAA6B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAuBb,CAAC;UAET,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,EACL5C,aAAa,iBACZN,OAAA,CAACH,WAAW;QACVmB,KAAK,EAAEV,aAAc;QACrB8D,MAAM,EAAEnE,OAAQ;QAChBoE,gBAAgB,EAAE/B;MAAqB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC/C,EAAA,CA/IID,IAAI;AAAAoE,EAAA,GAAJpE,IAAI;AAiJV,eAAeA,IAAI;AACnB;AAAA,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}