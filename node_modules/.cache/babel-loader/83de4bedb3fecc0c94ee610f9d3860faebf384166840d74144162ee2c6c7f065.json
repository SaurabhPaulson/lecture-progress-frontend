{"ast":null,"code":"var _jsxFileName = \"C:\\\\Gizmeon\\\\Perpetual\\\\Project\\\\Test-2\\\\lecture-progress-frontend\\\\src\\\\components\\\\ProgressTracker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchProgress } from '../api/progressApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressTracker = ({\n  userId,\n  videoId\n}) => {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [intervals, setIntervals] = useState([]);\n  useEffect(() => {\n    const getProgress = async () => {\n      try {\n        const data = await fetchProgress(userId, videoId);\n        setIntervals(data.intervals);\n        const uniqueTime = calculateUniqueViewingTime(data.intervals);\n        const videoDuration = 100; // Replace with actual video duration\n        const percent = videoDuration ? uniqueTime / videoDuration * 100 : 0;\n        setProgress(percent);\n      } catch (error) {\n        console.error('Error fetching progress:', error);\n      }\n    };\n    getProgress();\n  }, [userId, videoId]);\n  const calculateUniqueViewingTime = intervals => {\n    const merged = mergeIntervals(intervals);\n    return merged.reduce((sum, i) => sum + (i.end - i.start), 0);\n  };\n  const mergeIntervals = intervals => {\n    if (!intervals.length) return [];\n    intervals.sort((a, b) => a.start - b.start);\n    const merged = [intervals[0]];\n    for (let i = 1; i < intervals.length; i++) {\n      const current = intervals[i];\n      const last = merged[merged.length - 1];\n      if (current.start <= last.end) {\n        last.end = Math.max(last.end, current.end);\n      } else {\n        merged.push(current);\n      }\n    }\n    return merged;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Progress Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: `${progress}%`,\n          backgroundColor: 'green',\n          height: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [progress.toFixed(2), \"% watched\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgressTracker, \"vHg0oJuQAbZMtGpozpRrjGMQQs0=\");\n_c = ProgressTracker;\nexport default ProgressTracker;\nvar _c;\n$RefreshReg$(_c, \"ProgressTracker\");","map":{"version":3,"names":["React","useEffect","useState","fetchProgress","jsxDEV","_jsxDEV","ProgressTracker","userId","videoId","_s","progress","setProgress","intervals","setIntervals","getProgress","data","uniqueTime","calculateUniqueViewingTime","videoDuration","percent","error","console","merged","mergeIntervals","reduce","sum","i","end","start","length","sort","a","b","current","last","Math","max","push","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","backgroundColor","height","toFixed","_c","$RefreshReg$"],"sources":["C:/Gizmeon/Perpetual/Project/Test-2/lecture-progress-frontend/src/components/ProgressTracker.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { fetchProgress } from '../api/progressApi';\n\nconst ProgressTracker = ({ userId, videoId }) => {\n  const [progress, setProgress] = useState(0);\n  const [intervals, setIntervals] = useState([]);\n\n  useEffect(() => {\n    const getProgress = async () => {\n      try {\n        const data = await fetchProgress(userId, videoId);\n        setIntervals(data.intervals);\n        const uniqueTime = calculateUniqueViewingTime(data.intervals);\n        const videoDuration = 100; // Replace with actual video duration\n        const percent = videoDuration ? (uniqueTime / videoDuration) * 100 : 0;\n        setProgress(percent);\n      } catch (error) {\n        console.error('Error fetching progress:', error);\n      }\n    };\n\n    getProgress();\n  }, [userId, videoId]);\n\n  const calculateUniqueViewingTime = (intervals) => {\n    const merged = mergeIntervals(intervals);\n    return merged.reduce((sum, i) => sum + (i.end - i.start), 0);\n  };\n\n  const mergeIntervals = (intervals) => {\n    if (!intervals.length) return [];\n    intervals.sort((a, b) => a.start - b.start);\n    const merged = [intervals[0]];\n    for (let i = 1; i < intervals.length; i++) {\n      const current = intervals[i];\n      const last = merged[merged.length - 1];\n      if (current.start <= last.end) {\n        last.end = Math.max(last.end, current.end);\n      } else {\n        merged.push(current);\n      }\n    }\n    return merged;\n  };\n\n  return (\n    <div>\n      <h2>Progress Tracker</h2>\n      <div>\n        <div style={{ width: `${progress}%`, backgroundColor: 'green', height: '20px' }} />\n      </div>\n      <p>{progress.toFixed(2)}% watched</p>\n    </div>\n  );\n};\n\nexport default ProgressTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}